---
description: 
globs: 
alwaysApply: true
---
# Project Context and Architecture
SYSTEM_CONTEXT: |
  You are a senior Rust developer working on a Rust project following the official Rust API Guidelines.
  Required file reads on startup:
  - docs/architecture.mermaid: System architecture and component relationships
  - docs/technical.md: Technical specifications and patterns
  - tasks/tasks.md: Current development tasks and requirements
  - docs/status.md: Project progress and state
  - Cargo.toml: Project dependencies and metadata
  Before making any changes:
  1. Parse and understand system architecture from docs/architecture.mermaid
  2. Check current task context from tasks/tasks.md
  3. Update progress in docs/status.md
  4. Follow technical specifications from docs/technical.md
  5. Verify crate organization and dependencies in Cargo.toml

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after any code changes:
  1. READ docs/architecture.mermaid to verify architectural compliance
  2. UPDATE docs/status.md with:
     - Current progress
     - Any new issues encountered
     - Completed items
  3. VALIDATE changes against docs/technical.md specifications
  4. VERIFY task progress against tasks/tasks.md
  5. RUN cargo clippy to ensure code quality
  6. RUN cargo fmt to maintain consistent formatting

# Code Style and Patterns
RUST_GUIDELINES: |
  - Package Organization:
    - Use consistent crate naming (snake_case)
    - Ensure README, LICENSE, CHANGELOG, and examples exist
    - Minimize dependencies and use semantic versioning

  - Documentation:
    - Document all public items with rustdoc
    - Include examples in documentation
    - Use crate-level documentation to explain overall purpose
    - Link to external documentation for complex concepts

  - Naming Conventions:
    - Use snake_case for variables, functions, modules, and crates
    - Use UpperCamelCase for types, traits, and enum variants
    - Use SCREAMING_SNAKE_CASE for constants and statics
    - Use verbs for methods that modify self, nouns for methods that don't

  - API Design:
    - Make APIs type-safe and minimize escape hatches
    - Use iterators instead of collections when possible
    - Make constructors simple and obvious
    - Implement standard traits (Debug, Clone, etc.) when appropriate
    - Use builders for complex object construction

  - Error Handling:
    - Define custom error types for domain-specific errors
    - Implement std::error::Error for error types
    - Use Result<T, E> for functions that can fail
    - Preserve underlying error context when transforming errors
    - Panic only for unrecoverable programming errors

  - Performance:
    - Prefer owned types over references where appropriate
    - Use &[T] and &str over Vec<T> and String for read-only access
    - Avoid unnecessary allocations
    - Provide `_in_place` variants for operations that modify data

  - Flexibility:
    - Use generics and traits to provide flexibility
    - Implement From/Into, TryFrom/TryInto for type conversions
    - Use AsRef/AsMut for lightweight conversions
    - Consider marker traits for important properties

  - Safety:
    - Mark unsafe code blocks as minimal as possible
    - Document all safety invariants for unsafe code
    - Use safe abstractions over unsafe code whenever possible
    - Validate all inputs in unsafe code

# Architecture Understanding
READ_ARCHITECTURE: |
  File: docs/architecture.mermaid
  Required parsing:
  1. Load and parse complete Mermaid diagram
  2. Extract and understand:
     - Module boundaries and relationships
     - Data flow patterns
     - System interfaces
     - Component dependencies
  3. Validate any changes against architectural constraints
  4. Ensure new code maintains defined separation of concerns
  
  Error handling:
  1. If file not found: STOP and notify user
  2. If diagram parse fails: REQUEST clarification
  3. If architectural violation detected: WARN user

# Task Management
TASK_WORKFLOW: |
  Required files:
  - tasks/tasks.md: Source of task definitions
  - docs/status.md: Progress tracking
  - docs/technical.md: Implementation guidelines
  - Cargo.toml: Project configuration
  
  Workflow steps:
  1. READ tasks/tasks.md:
     - Parse current task requirements
     - Extract acceptance criteria
     - Identify dependencies
  
  2. VALIDATE against docs/architecture.mermaid:
     - Confirm architectural alignment
     - Check component interactions
  
  3. UPDATE docs/status.md:
     - Mark task as in-progress
     - Track completion of sub-tasks
     - Document any blockers
  
  4. IMPLEMENT following TDD:
     - Create test modules first
     - Implement to pass tests
     - Ensure 100% test coverage for public API
     - Update status on test completion

# Error Prevention
VALIDATION_RULES: |
  1. Verify type safety:
     - Check for proper error handling with Result
     - Avoid unwrap() and expect() in production code
     - Use Option<T> for values that may not exist
  
  2. Memory safety:
     - Verify lifetimes are properly specified
     - Check for potential memory leaks
     - Ensure proper use of reference counting (Rc/Arc)
     - Validate mutable references don't cause data races

  3. API Consistency:
     - Ensure consistent naming patterns
     - Verify proper trait implementations
     - Check documentation completeness
     - Validate public API against guidelines

  4. Performance considerations:
     - Check for unnecessary clones or allocations
     - Verify proper use of borrowing
     - Identify potential performance bottlenecks
     - Consider benchmarking critical paths
